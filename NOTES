What we need;
- a trigger to go into "Q&A mode"
- a way for dialog to figure out what mode it's in, to redirect output appropriately, and draw things
- a way for Q&A mode to exit and generate an event for containing dialog

:quit

FormAction:

process_action:

    O_INT_CMDLINE:
        start_cmdline({{":", "quit"}}, OP_INT_END_CMDLINE);
            start_qna()
               start_next_question()
                   -- if it was the last question:
                        finished_qna(op)
                   -- otherwise:
                        - replace statusline text widget with label+input[qna_value], with following binds:
                            ESC: cancel-qna (OP_INT_CANCEL_QNA)
                            UP: qna-prev-history (OP_INT_QNA_PREVHIST)
                            DOWN: qna-next-history (OP_INT_QNA_NEXTHIST)
                            ENTER: end-question (OP_INT_END_QUESTION)

    OP_INT_CANCEL_QNA:
        repalces input with text

    OP_INT_QNA_NEXTHIST:
        replaces value in input
        puts cursor at the end of input

    OP_INT_QNA_PREVHIST:
        replaces value in input
        puts cursor at the end of input

    OP_INT_END_QUESTION:
        stores current qna_value in qna_responses
        start_next_question()

    OP_INT_END_CMDLINE:
        handle_cmdline(qna_responses[0]);

Interesting:
- to show or hide cursor, one needs Backend. Technically, draw() should have
  access, because it gets a Frame as argument, which contains Terminal, which
  contains Backend. But in practice, that stuff is not accessible. I believe
  Frame should give access to that stuff.

Hard:
- the API actively discourages storing `Text` values and anything that derives
  from them, e.g. `Paragraph`. (It's discouraged by references; I couldn't
  figure out a way to store this stuff in a struct.) `Text` and `Paragraph`
  have to be rebuilt before displaying a frame. I'm ok with rebuilding
  `Paragraph`, since it's relatively lightweight thing. `Text`, on the other
  hand, should contain formatting (although it can't properly in tui-rs);
  re-formatting the whole article on each repaint is... wrong.

Unimplementable:
- implement highlighting keywords in itemlist -- https://github.com/fdehau/tui-rs/issues/118
    - see if I can get around this my implementing my own list widget
